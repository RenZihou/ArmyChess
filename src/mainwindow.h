// mainwindow.h
// -*- encoding: utf-8 -*-
// @Author: RZH

#ifndef ARMYCHESS_MAINWINDOW_H
#define ARMYCHESS_MAINWINDOW_H

#include <QMainWindow>
#include <QGridLayout>
#include <QLineEdit>
#include <QTcpServer>
#include <QTcpSocket>

#define DISCONNECTED 0
#define LISTENING 1
#define CONNECTED_SERVER 2
#define CONNECTED_CLIENT 3

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow {
Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = nullptr);

    ~MainWindow() override;

private:
    int state = DISCONNECTED;  // connection state
    bool opponent_started = false;  // opponent has clicked start
    Ui::MainWindow *ui;  // ui generated by .ui file
    QTcpServer *server = nullptr;  // tcp server
    QTcpSocket *socket = nullptr;  // tcp socket (both server and client)

    /**
     * change player side
     * @param side new player side
     */
    void changeSide(int side);

    /**
     * player has timeout
     * @param count timeout times
     */
    void timeOut(int count);

    /**
     * create server and listen, raise a createServerWindow
     */
    void createServer();

    /**
     * raise a connectServerWindow
     */
    void connectServer();

    /**
     * try to connect to server
     * @param ip server address
     */
    void tryConnect(const QString &ip);

    /**
     * cut down connection (if exist) and stop server
     */
    void stopServer();

    /**
     * cut down connection (if exist)
     */
    void stopClient();

    /**
     * call when new connection is established, build server socket
     * and set connection state
     */
    void connectionEstablished();

    /**
     * call when connection is interrupted
     */
    void connectionInterrupted();

    /**
     * send instruction to socket (to synchronize board)
     * @param cmd instruction
     */
    void send(const QString &cmd);

    /**
     * receive instruction from socket (to synchronize board)
     */
    void receive();

    /**
     * set connection state label
     * @param new_state current connection state
     */
    void setState(int new_state);

    /**
     * set turn label
     * @param text text to show in the label
     */
    void setTurn(const QString &text);

    /**
     * set count-down time
     * @param time time left
     */
    void setTime(int time);

    /**
     * build connections from board signal to window slot
     */
    void connectBoard();

    /**
     * call when start button is clicked, try to start the game
     */
    void start();

    /**
     * enable the admit defeat button
     */
    void enableAdmitDefeat();

    /**
     * admit defeat
     */
    void admitDefeat();

    /**
     * game over
     * @param w win or not (lose)
     */
    void win(bool w = true);

#ifdef CHEAT
    QGridLayout *cheatLayout;  // layout for cheat instruction input box
    QLineEdit *cheatCmd;  // cheat instruction input box

    /**
     * execute cheat instruction
     */
    void cheat();

#endif

signals:

    /**
     * signal of 'connection state changed'
     * @param new_state
     */
    void stateChanged(int new_state);
};


#endif //ARMYCHESS_MAINWINDOW_H
